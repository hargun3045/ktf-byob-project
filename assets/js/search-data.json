{
  
    
        "post0": {
            "title": "KTF Project Demo",
            "content": "dft_cases = pd.read_csv(&#39;SnapshotCases-28-July.csv&#39;) dft_deaths = pd.read_csv(&#39;SnapshotDeaths-28-July.csv&#39;) . dft_cases.head() . states 14-Mar-20 15-Mar-20 16-Mar-20 17-Mar-20 18-Mar-20 19-Mar-20 20-Mar-20 21-Mar-20 22-Mar-20 ... 19-Jul-20 20-Jul-20 21-Jul-20 22-Jul-20 23-Jul-20 24-Jul-20 25-Jul-20 26-Jul-20 27-Jul-20 28-Jul-20 . 0 Andaman and Nicobar Islands | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 199 | 203 | 208 | 217 | 236 | 255 | 286 | 314 | 334 | 359 | . 1 Andhra Pradesh | 1 | 1 | 1 | 1 | 1 | 3 | 3 | 5 | 6 | ... | 49650 | 53724 | 58668 | 64713 | 72711 | 80858 | 88671 | 96298 | 102349 | 110297 | . 2 Arunachal Pradesh | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 740 | 790 | 858 | 949 | 991 | 1056 | 1126 | 1158 | 1239 | 1330 | . 3 Assam | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 23898 | 24991 | 26671 | 27643 | 28690 | 29820 | 30985 | 32127 | 33475 | 34846 | . 4 Bihar | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | ... | 26379 | 27455 | 28564 | 30066 | 31691 | 33511 | 36314 | 38919 | 41111 | 43591 | . 5 rows × 138 columns . # your code here dt_today = dft_cases.columns.to_list()[-1] dt_yday = dft_cases.columns.to_list()[-2] . # your code here df_table = pd.DataFrame({&#39;Cases&#39;:dft_cases.set_index(&#39;states&#39;)[dt_today],&#39;Deaths&#39;: dft_deaths.set_index(&#39;states&#39;)[dt_today], &#39;PCases&#39; :dft_cases.set_index(&#39;states&#39;)[dt_yday],&#39;PDeaths&#39;:dft_deaths.set_index(&#39;states&#39;)[dt_yday]}) df_table = df_table.sort_values(by=[&#39;Cases&#39;,&#39;Deaths&#39;],ascending=[False,False]).reset_index() . for c in &#39;Cases, Deaths&#39;.split(&#39;, &#39;): df_table[f&#39;{c} (+)&#39;] = (df_table[c] - df_table[f&#39;P{c}&#39;]).clip(0) df_table[&#39;Fatality Rate&#39;] = (100* df_table[&#39;Deaths&#39;]/ df_table[&#39;Cases&#39;]).round(2) . df_table.head() . states Cases Deaths PCases PDeaths Cases (+) Deaths (+) Fatality Rate . 0 Maharashtra | 391440 | 14164 | 383723 | 13882 | 7717 | 282 | 3.62 | . 1 Tamil Nadu | 227688 | 3659 | 220716 | 3571 | 6972 | 88 | 1.61 | . 2 Delhi | 132275 | 3881 | 131219 | 3853 | 1056 | 28 | 2.93 | . 3 Andhra Pradesh | 110297 | 1148 | 102349 | 1090 | 7948 | 58 | 1.04 | . 4 Karnataka | 107001 | 2064 | 101465 | 1962 | 5536 | 102 | 1.93 | . summary = {col:df_table[col].sum() for i,col in enumerate(df_table.columns) if i in range(1,7)} . # your code here summary[&#39;updated&#39;] =&#39;28 July 2020&#39; summary[&#39;since&#39;] = &#39;27 July 2020&#39; . print(summary) . {&#39;Cases&#39;: 1514800, &#39;Deaths&#39;: 34121, &#39;PCases&#39;: 1465799, &#39;PDeaths&#39;: 33352, &#39;Cases (+)&#39;: 49001, &#39;Deaths (+)&#39;: 770, &#39;updated&#39;: &#39;28 July 2020&#39;, &#39;since&#39;: &#39;27 July 2020&#39;} . Setting up the HTML layout for the summary . To present your results we provide you a basic html layout below . overview = &#39;&#39;&#39; &lt;!-- ####### HTML!! #########--&gt; &lt;h1 style=&quot;color: #5e9ca0; text-align: center;&quot;&gt;India&lt;/h1&gt; &lt;p style=&quot;text-align: center;&quot;&gt;Last update: &lt;strong&gt;{update}&lt;/strong&gt;&lt;/p&gt; &lt;p style=&quot;text-align: center;&quot;&gt;Confirmed cases:&lt;/p&gt; &lt;p style=&quot;text-align: center;font-size:24px;&quot;&gt;{cases} (&lt;span style=&quot;color: #ff0000;&quot;&gt;+{new}&lt;/span&gt;)&lt;/p&gt; &lt;p style=&quot;text-align: center;&quot;&gt;Confirmed deaths:&lt;/p&gt; &lt;p style=&quot;text-align: center;font-size:24px;&quot;&gt;{deaths} (&lt;span style=&quot;color: #ff0000;&quot;&gt;+{dnew}&lt;/span&gt;)&lt;/p&gt; &#39;&#39;&#39; . You can fill the above HTML with the information from the summary dictionary. If you have correctly made your summary, you can use the helper code below to see the html output . # Fill the above HTML with the information from the summary dictionary update = summary[&#39;updated&#39;] cases = summary[&#39;Cases&#39;] new = summary[&#39;Cases (+)&#39;] deaths = summary[&#39;Deaths&#39;] dnew = summary[&#39;Deaths (+)&#39;] html = HTML(overview.format(update=update, cases=cases,new=new,deaths=deaths,dnew=dnew)) display(html) . India . Last update: 28 July 2020 . Confirmed cases: . 1514800 (+49001) . Confirmed deaths: . 34121 (+770) . dt_cols = list(dft_cases.columns[1:]) dft_ct_new_cases = dft_cases.groupby(&#39;states&#39;)[dt_cols].sum().diff(axis=1).fillna(0).astype(int) dft_ct_new_cases.sort_values(by = &#39;28-Jul-20&#39;, ascending = False,inplace = True) . dft_ct_new_cases.head() . 14-Mar-20 15-Mar-20 16-Mar-20 17-Mar-20 18-Mar-20 19-Mar-20 20-Mar-20 21-Mar-20 22-Mar-20 23-Mar-20 ... 19-Jul-20 20-Jul-20 21-Jul-20 22-Jul-20 23-Jul-20 24-Jul-20 25-Jul-20 26-Jul-20 27-Jul-20 28-Jul-20 . states . Andhra Pradesh 0 | 0 | 0 | 0 | 0 | 2 | 0 | 2 | 1 | 1 | ... | 5041 | 4074 | 4944 | 6045 | 7998 | 8147 | 7813 | 7627 | 6051 | 7948 | . Maharashtra 0 | 18 | 6 | 3 | 3 | 4 | 4 | 12 | 10 | 23 | ... | 9518 | 8240 | 8336 | 10576 | 9895 | 9615 | 9251 | 9431 | 7924 | 7717 | . Tamil Nadu 0 | 0 | 0 | 0 | 1 | 1 | 0 | 3 | 3 | 3 | ... | 4979 | 4985 | 4965 | 5849 | 6472 | 6785 | 6988 | 6986 | 6993 | 6972 | . Karnataka 0 | 0 | 1 | 2 | 5 | 1 | 0 | 5 | 6 | 7 | ... | 4120 | 3648 | 3649 | 4764 | 5030 | 5007 | 5072 | 5199 | 5324 | 5536 | . Uttar Pradesh 0 | 1 | 0 | 2 | 2 | 3 | 4 | 4 | 2 | 2 | ... | 2211 | 1913 | 2128 | 2300 | 2516 | 2667 | 2971 | 3246 | 3505 | 3458 | . 5 rows × 137 columns . df = dft_ct_new_cases.copy() df.loc[&#39;Total&#39;] = df.sum() n = 5 ax = [] fig = plt.figure(figsize = (16,20)) gs = fig.add_gridspec(n+2, 3) # gs = fig.add_gridspec(2, 3) ax1 = fig.add_subplot(gs[0, :]) ef = df.loc[&#39;Total&#39;].rename_axis(&#39;date&#39;).reset_index() ef[&#39;date&#39;] = ef[&#39;date&#39;].astype(&#39;datetime64[ns]&#39;) ax1.bar(ef.date,ef.Total,alpha=0.3,color=&#39;#007acc&#39;) ax1.plot(ef.date,ef.Total , marker=&quot;o&quot;, color=&#39;#007acc&#39;) ax1.xaxis.set_major_locator(mdates.WeekdayLocator()) ax1.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b %d&#39;)) ax1.text(0.02, 0.5,&#39;India daily case count&#39;, transform = ax1.transAxes, fontsize=25); ax1.spines[&#39;right&#39;].set_visible(False) ax1.spines[&#39;top&#39;].set_visible(False) ax2 = fig.add_subplot(gs[1,0]) ef = df.loc[&#39;Maharashtra&#39;].rename_axis(&#39;date&#39;).reset_index() ef[&#39;date&#39;] = ef[&#39;date&#39;].astype(&#39;datetime64[ns]&#39;) ax2.bar(ef.date, ef.Maharashtra,color = &#39;#007acc&#39;,alpha=0.5) ax2.xaxis.set_major_locator(mdates.WeekdayLocator()) ax2.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b %d&#39;)) ax2.set_xticks(ax2.get_xticks()[::3]) maxyval = ef.Maharashtra.max() ax2.set_ylim([0,maxyval]) ax2.text(0.05, 0.5,&#39;Maharashtra&#39;, transform = ax2.transAxes, fontsize=20); ax2.spines[&#39;right&#39;].set_visible(False) ax2.spines[&#39;top&#39;].set_visible(False) ax3 = fig.add_subplot(gs[1,1]) ef = df.loc[&#39;Tamil Nadu&#39;].rename_axis(&#39;date&#39;).reset_index() ef[&#39;date&#39;] = ef[&#39;date&#39;].astype(&#39;datetime64[ns]&#39;) ax3.bar(ef.date, ef[&#39;Tamil Nadu&#39;],color = &#39;#007acc&#39;,alpha=0.5,) ax3.xaxis.set_major_locator(mdates.WeekdayLocator()) ax3.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b %d&#39;)) ax3.set_xticks(ax3.get_xticks()[::3]) ax3.text(0.05, 0.5,&#39;Tamil Nadu&#39;, transform = ax3.transAxes, fontsize=20); ax3.spines[&#39;right&#39;].set_visible(False) ax3.spines[&#39;top&#39;].set_visible(False) ax4 = fig.add_subplot(gs[1,2]) ef = df.loc[&#39;Delhi&#39;].rename_axis(&#39;date&#39;).reset_index() ef[&#39;date&#39;] = ef[&#39;date&#39;].astype(&#39;datetime64[ns]&#39;) ax4.bar(ef.date, ef.Delhi,color = &#39;#007acc&#39;,alpha=0.5) ax4.set_xticks([]) ax4.xaxis.set_major_locator(mdates.WeekdayLocator()) ax4.xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b %d&#39;)) ax4.set_xticks(ax4.get_xticks()[::3]) ax4.spines[&#39;right&#39;].set_visible(False) ax4.spines[&#39;top&#39;].set_visible(False) ax4.text(0.05, 0.5,&#39;Delhi&#39;, transform = ax4.transAxes, fontsize=20) for i in range(n): ax.append(fig.add_subplot(gs[i+2,:])) ef = df.iloc[i+3].rename_axis(&#39;date&#39;).reset_index() ef[&#39;date&#39;] = ef[&#39;date&#39;].astype(&#39;datetime64[ns]&#39;) ax[i].bar(ef.date,ef.iloc[:,-1],color = &#39;#007acc&#39;,alpha=0.3) ax[i].plot(ef.date,ef.iloc[:,-1],marker=&#39;o&#39;,color=&#39;#007acc&#39;) ax[i].text(0.02,0.5,f&#39;{ef.columns.values[-1]}&#39;,transform = ax[i].transAxes, fontsize = 20); ax[i].xaxis.set_major_locator(mdates.WeekdayLocator()) ax[i].xaxis.set_major_formatter(mdates.DateFormatter(&#39;%b %d&#39;)) ax[i].set_ylim([0,7000]) ax[i].spines[&#39;right&#39;].set_visible(False) ax[i].spines[&#39;top&#39;].set_visible(False) plt.tight_layout() . /usr/local/lib/python3.7/site-packages/pandas/plotting/_matplotlib/converter.py:103: FutureWarning: Using an implicitly registered datetime converter for a matplotlib plotting method. The converter was registered by pandas on import. Future versions of pandas will require you to explicitly register matplotlib converters. To register the converters: &gt;&gt;&gt; from pandas.plotting import register_matplotlib_converters &gt;&gt;&gt; register_matplotlib_converters() warnings.warn(msg, FutureWarning) . print(df_table.to_string(index=False)) . states Cases Deaths PCases PDeaths Cases (+) Deaths (+) Fatality Rate Maharashtra 391440 14164 383723 13882 7717 282 3.62 Tamil Nadu 227688 3659 220716 3571 6972 88 1.61 Delhi 132275 3881 131219 3853 1056 28 2.93 Andhra Pradesh 110297 1148 102349 1090 7948 58 1.04 Karnataka 107001 2064 101465 1962 5536 102 1.93 Uttar Pradesh 73951 1497 70493 1456 3458 41 2.02 West Bengal 62964 1449 60830 1411 2134 38 2.30 Gujarat 57982 2372 56874 2348 1108 24 4.09 Telangana 57142 480 55532 471 1610 9 0.84 Bihar 43591 269 41111 255 2480 14 0.62 Rajasthan 38636 644 37564 633 1072 11 1.67 Assam 34846 92 33475 90 1371 2 0.26 Haryana 32876 406 32127 397 749 9 1.23 Madhya Pradesh 29217 831 28589 821 628 10 2.84 Orissa 28107 189 26892 181 1215 8 0.67 Kerala 20895 68 19728 64 1167 4 0.33 Jammu and Kashmir 18879 333 18390 321 489 12 1.76 Punjab 14378 336 13769 318 609 18 2.34 Jharkhand 9563 94 8803 90 760 4 0.98 Goa 5287 36 5119 36 168 0 0.68 Tripura 4287 21 4066 17 221 4 0.49 Pondicherry 3013 47 2874 43 139 4 1.56 Himachal Pradesh 2330 13 2270 13 60 0 0.56 Manipur 2317 0 2286 0 31 0 0.00 Nagaland 1460 4 1385 5 75 0 0.27 Arunachal Pradesh 1330 3 1239 3 91 0 0.23 Chandigarh 934 14 910 14 24 0 1.50 Meghalaya 779 5 738 5 41 0 0.64 Sikkim 592 1 568 1 24 0 0.17 Mizoram 384 0 361 0 23 0 0.00 Andaman and Nicobar Islands 359 1 334 1 25 0 0.28 Daman and Diu 0 0 0 0 0 0 NaN Lakshadweep 0 0 0 0 0 0 NaN .",
            "url": "https://hargun3045.github.io/ktf-byob-project/2020/08/08/KTF.html",
            "relUrl": "/2020/08/08/KTF.html",
            "date": " • Aug 8, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://hargun3045.github.io/ktf-byob-project/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://hargun3045.github.io/ktf-byob-project/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://hargun3045.github.io/ktf-byob-project/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hargun3045.github.io/ktf-byob-project/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}